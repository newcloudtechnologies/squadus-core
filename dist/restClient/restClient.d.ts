import { type AxiosInstance, type AxiosRequestConfig, type AxiosResponse } from 'axios';
import { SettingsName } from '../constants';
import { Message } from '../models';
import { AddUsersToRoomRequestParams, CreatePrivateChannelRequestParams, CreatePublicChannelRequestParams, CreateUserRequestParams, DirectRoomResponse, GetHistoryData, GetHistoryRequestParams, GetRoomInfoByRoomIdRequestParams, GetRoomInfoRequestParams, GetRoomInfoResponse, LoginRequestParams, ReadRoomResponse, RemoveUserFromChannelRequestParams, RemoveUserFromChannelResponse, RestResponse, SaveRoomSettingsData, SaveRoomSettingsRequestParams, SccCallStartData, SccCallStartRequestParams, SccCreateConferenceRequestParams, SccCreateConferenceResponse, SccGetConferenceInfo, SendAttachmentRequestParams, SendMessageByGroupNameRequestParams, SendMessageData, SendMessageRequestParams, SettingsData, UserPreferencesData, UserPreferencesRequestParams, UserResponse } from './types';
import { ChannelData, CreatePrivateChannelResponse, CreatePublicChannelResponse, User } from './types/models';
import { SetUserRoleRequestParams, SetUserRoleResponse } from './types/restAPI/changeRoles';
import { CreateTeamRequestParams } from './types/restAPI/createTeam';
import { CreateTeamResponse } from './types/models/teamData';
import { LinkChannelsToTeamRequestParams } from './types/restAPI/linkChannelsToTeam';
import { LinkChannelsToTeamResponse } from './types/models/linkedChannelData';
import { CreateDiscussionRequestParams } from './types/restAPI/createDiscussion';
import { CreateDiscussionResponse } from './types/models/discussionData';
import { SccGetUsersConferences } from './types/restAPI/sccGetUsersConferences';
import { GetCommandsResponse } from './types/models/commandData';
import { GetRolesListResponse } from './types/models/rolesData';
export declare function createHttpClient(serverUrl: string, userAgent?: string): AxiosInstance;
export declare class RestClient {
    private httpClient;
    private isClientAuthorized;
    private userAgent;
    serverUrl: string;
    constructor(serverUrl: string, userAgent?: string);
    post: <T = any, R = AxiosResponse<T, any>, D = any>(url: string, data?: D | undefined, config?: AxiosRequestConfig<D> | undefined) => Promise<R>;
    get: <T = any, R = AxiosResponse<T, any>, D = any>(url: string, config?: AxiosRequestConfig<D> | undefined) => Promise<R>;
    delete: <T = any, R = AxiosResponse<T, any>, D = any>(url: string, config?: AxiosRequestConfig<D> | undefined) => Promise<R>;
    put: <T = any, R = AxiosResponse<T, any>, D = any>(url: string, data?: D | undefined, config?: AxiosRequestConfig<D> | undefined) => Promise<R>;
    private isAuthorized;
    changeServer(serverUrl: string, userAgent?: string | undefined): void;
    saveToken(userId: string, authToken: string): void;
    login: (props: LoginRequestParams) => Promise<string | undefined>;
    createUser: (params: CreateUserRequestParams) => RestResponse<User>;
    createChannel: (params: CreatePublicChannelRequestParams) => RestResponse<CreatePublicChannelResponse>;
    createTeam: (params: CreateTeamRequestParams) => RestResponse<CreateTeamResponse>;
    linkChannelsToTeam: ({ teamId, rooms, }: LinkChannelsToTeamRequestParams) => RestResponse<LinkChannelsToTeamResponse>;
    createDiscussion: ({ pmid, prid, reply, t_name, users, }: CreateDiscussionRequestParams) => RestResponse<CreateDiscussionResponse>;
    createGroup: (params: CreatePrivateChannelRequestParams) => RestResponse<CreatePrivateChannelResponse>;
    sccCreateConference: (params: SccCreateConferenceRequestParams) => RestResponse<SccCreateConferenceResponse>;
    removeUserFromChannel: (params: RemoveUserFromChannelRequestParams) => RestResponse<RemoveUserFromChannelResponse>;
    createDirectRoom: (username: string) => RestResponse<DirectRoomResponse>;
    getUserInfoByUsername: (username: string) => RestResponse<UserResponse>;
    getSettings: (settings?: Array<SettingsName>) => RestResponse<SettingsData>;
    getChannelInfo: (channelName: string) => RestResponse<ChannelData>;
    setUserRole: ({ roomId, t, userId, roleName, roleValue, }: SetUserRoleRequestParams) => RestResponse<SetUserRoleResponse>;
    getRoomInfoByRoomId: (params: GetRoomInfoByRoomIdRequestParams) => RestResponse<GetRoomInfoResponse>;
    getRoomInfo: (params: GetRoomInfoRequestParams) => RestResponse<GetRoomInfoResponse>;
    getHistory: (params: Array<GetHistoryRequestParams>) => RestResponse<GetHistoryData>;
    getOAuthSettings: () => Promise<any>;
    sccGetConferenceInfo: (conferenceNumber: string) => RestResponse<SccGetConferenceInfo>;
    sccGetFullConferenceInfo: (conferenceNumber: string, query: string) => RestResponse<SccGetConferenceInfo>;
    sccGetUserConferences: (sort?: string, sortOrder?: string, offset?: number, count?: number) => RestResponse<SccGetUsersConferences>;
    addUsersToRoom: (params: Array<AddUsersToRoomRequestParams>) => RestResponse<boolean>;
    saveRoomSettings: (params: SaveRoomSettingsRequestParams) => RestResponse<SaveRoomSettingsData>;
    setUserPreferences: (params: UserPreferencesRequestParams) => RestResponse<UserPreferencesData>;
    sendMessageByGroupName: (params: SendMessageByGroupNameRequestParams) => RestResponse<SendMessageData>;
    sendMessage: (params: SendMessageRequestParams) => Promise<Message>;
    sendAttachment: (params: SendAttachmentRequestParams) => Promise<Message>;
    sccCallStart: (params: SccCallStartRequestParams) => RestResponse<SccCallStartData>;
    sccGenerateAccessToken: (jitsiRoomNumber: string) => RestResponse<string>;
    readThread: (tmid: string) => Promise<void>;
    readRoom: (rid: string) => RestResponse<ReadRoomResponse>;
    deleteUser: (userId: string) => Promise<AxiosResponse<any, any> | undefined>;
    deleteChannel: (roomId: string) => Promise<AxiosResponse<any, any> | undefined>;
    deletePrivateChannel: (roomId: string) => Promise<AxiosResponse<any, any> | undefined>;
    deleteTeam: (teamId: string) => Promise<AxiosResponse<any, any> | undefined>;
    getCommands: (command?: string) => RestResponse<GetCommandsResponse>;
    getRolesList: () => RestResponse<GetRolesListResponse>;
}
